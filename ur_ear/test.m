% test.m% pkg load control% pkg load signal%------------------------------------------------------------------------------%% SET PARAMETERS%------------------------------------------------------------------------------%initial_stimulus = 1;  % select default stimulus type to #1, which is *.wav fileCF_range = [9600 10400]; % [200 3000]; % set a 'generic' default range of CFs; this can be updated on GUICF_num = 50;rng('default'); % added to accommodate older versions of Matlab, in cases for which rng has previously been runrng('shuffle'); % seed the random number generator using time of day% input paramswavfile1 = '../data/robin_speech/stimuli/01_ba_peter.wav';Fs = 100e3; RsFs = 10000;  %Resample rate for time_freq surface plotsstimdB = 50.0;  % overall RMS level in dB SPL; This field is common for MOST stimuli - can read it in hereadd_LTASS_noise = 0;  SNR = 0; % Note that tukeywin is applied after noise is added (no tukeywin was used for 'plain' speech)% AN paramsWhich_AN = 1;fiber_num = 1;fiberType = 3;      % AN fiber type. (1 = low SR, 2 = medium SR, 3 = high SR)implnt = 0;         % 0 = approximate model, 1=exact powerlaw implementation(See Zilany etal., 2009)noiseType = 1;      % 0 for fixed fGn (1 for variable fGn) - this is the 'noise' associated with spontaneous activity of AN fibers - see Zilany et al., 2009. "0" lets you "freeze" it.species = 2;% 1=cat; 2=human AN model parameters (with Shera tuning sharpness)onset_num = 1;  % 1st point that will be included in analyzed response  (allows exclusion of onset response, e.g. to omit 1st 50 ms, use 0.050*Fs;)ag_dbloss=[0 0 0 0 0 0 0];ag_fs = [125 250 500 1e3 2e3 4e3 8e3];  % audiometric frequencies% IC paramsBMF = 100;M = [];Delta = [];%------------------------------------------------------------------------------%% READ INPUT SOUND%------------------------------------------------------------------------------%%Wav File   (Note: stimulus duration is computed from file, and no on/off ramp is applied.)% Add LTASS noise (add this option to GUI)[stim_temp, Fs_wav] = audioread(wavfile1);if size(stim_temp,2) > 1    stim_temp = stim_temp(:,1);end[p,q] = rat(Fs/Fs_wav,0.0001);% find two integers whose ratio matches the desired change in sampling ratestimulus = resample(stim_temp',p,q);% resample signal to have sampling rate required for AN modelstimulus = 20e-6 * power(10,(stimdB/20)) * stimulus/rms(stimulus); % scale stim to have an rms = 1, then scale to desired dB SPL in Pascals.if add_LTASS_noise == 1                    % Make wideband LTASS noise (100 Hz - 6 kHz)  disp('Adding LTASS noise with SNR = 0');  ltass_SPL = stimdB - SNR;                 ltass_noise = ltass_noise0(Fs,ltass_SPL,length(stimulus),1); % note: function modified to handle Fs = 100kHz  ltass_ramp = 0.010;  ltass_dur = length(stimulus)/Fs;  gate = tukeywin(length(ltass_noise), 2*ltass_ramp/ltass_dur); %gating function   ltass_noise = ltass_noise .* gate;  stimulus = stimulus + ltass_noise';      endclear stim_temp%------------------------------------------------------------------------------%% Compute Cochlea outer and innner hair cells outputp (COHC AND CIHC)%------------------------------------------------------------------------------%CFs = logspace(log10(CF_range(1)),log10(CF_range(2)),CF_num); % set range and resolution of CFs heredur = length( stimulus)/Fs;             % duration of waveform in secdbloss = interp1(ag_fs,ag_dbloss,CFs,'linear','extrap');[cohc_vals,cihc_vals,OHC_Loss]=fitaudiogram2(CFs,dbloss,species);if cohc_vals(1) == 0    cohc_vals(1) = 1; % for a very low CF, a "0" may be returned by Bruce et al fit audiogram, but this is a bad default. Set it to 1 here.endif cihc_vals(1) == 0    cihc_vals(1) = 1; % for a very low CF, a "0" may be returned, but this is a bad default. Set it to 1 here.end%------------------------------------------------------------------------------%% Compute Auditory Nerve fiber (ANF) and Inferior Colliculus (IC) output%------------------------------------------------------------------------------%% Loop through CFs (within nconditions loop)for  n = 1:length(CFs)                     % AN model: (Zilany et al., 2014)    CF = CFs(n); % CF in Hz;     nrep=1;                         switch  Which_AN                          case 1                         % Using ANModel_2014 (2-step process)        cohc = cohc_vals(n); cihc = cihc_vals(n); % LHC - fix - need to grab one value of cohc, cihc for each CF        vihc = model_IHC( stimulus,CF,nrep,1/Fs,dur*1.2,cohc,cihc,species);        %                [vihc,bm] = model_IHC_BM( stimulus,CF,nrep,1/Fs,dur*1.2,cohc,cihc,species); % use vrsion of model_IHC that returns BM response (ChirpFilter only)        [an_sout,~,~] = model_Synapse(vihc,CF,nrep,1/Fs,fiberType,noiseType,implnt); % an_sout is the auditory-nerve synapse output - a rate vs. time function that could be used to drive a spike generator        AN_average(n) = mean(an_sout(onset_num:end)); % save mean rates for a plot of population AN response        %    BM_population(iCF,:) = resample(bm,RsFs,Fs);  % save synapse output waveform into a matrix (load waves into matrix so they'll show up properly in imagesc)        VIHC_population(n,:) = resample(vihc,RsFs,Fs);  % save synapse output waveform into a matrix (load waves into matrix so they'll show up properly in imagesc)        an_sout_population(n,:) = resample(an_sout,RsFs,Fs);  % save synapse output waveform into a matrix (load waves into matrix so they'll show up properly in imagesc)      case 2         % Using BEZ2018        cohc = cohc_vals(n); cihc = cihc_vals(n);        vihc = model_IHC_BEZ2018( stimulus,CF,nrep,1/Fs,dur*1.2,cohc,cihc,species);        [psth,neurogram_ft] = generate_neurogram_UREAR2(stimulus,Fs,species,ag_fs,ag_dbloss,CF_num,dur,n,fiber_num,CF_range,fiberType);                an_sout=(100000*psth)/fiber_num;                AN_average(n) = sum(psth(onset_num:end))/(dur*fiber_num);                an_sout_population(n,:) = resample(an_sout,RsFs,Fs);        an_sout_population_plot(n,:) = neurogram_ft;        VIHC_population(n,:) = resample(vihc,RsFs,Fs);  % save synapse output waveform into          end        % IC model: AN_ModFilt model (Mao et al., 2016)                        ic_sout_BE = unitgain_bpFilter(an_sout,BMF,Fs);  % Now, call NEW unitgain BP filter to simulate bandpass IC cell with all BMF's    average_ic_sout_BE(n) = mean(ic_sout_BE(onset_num:end)); % averages the bandpass response over the stimulus duration    BE_sout_population(n,:) = resample(ic_sout_BE,RsFs,Fs);                   end % END OF CF LOOP[filepath,wav_file_name,ext] = fileparts(wavfile1);save(sprintf('../data/ICoutput/ICoutput_CF_%d_%d_wav_%s.mat', CF_range(1), CF_range(2), wav_file_name), 'BE_sout_population', 'RsFs')